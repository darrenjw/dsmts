#summary Example R code to test the command-line stochastic simulator, gillespie2
#labels Phase-Deploy

= Introduction =


If you have a simulator, you will almost certainly want to write your own code for testing. Irrespective of the language used to build your simulator, you are likely to want to write your test code in a high level language with good support for data analysis and visualisation. Obvious choices include Python, R and Matlab.

Here we provide example code for the R statistical programming language. The code is tailored for testing the command-line linux simulator gillespie2 but can be trivially changed for any command-line simulator. R code is really quite readable, so it should be fairly clear what is going on here even if you don't already program in R. However, R is a great language for data analysis, visualisation and statistical computing (and is free), so if you are into discrete stochastic simulation, you probably want to learn how to use it anyway!


The main test function is given below : 

{{{
testmodel<-function(model="dsmts-001-01",n=10,tspath=".",
     verb=TRUE,plot=FALSE,meanthresh=3,sdthresh=5)
 {
        stem=paste(tspath,model,sep="/")
        modelfile=paste(stem,".xml",sep="")
        meanfile=paste(stem,"-mean.csv",sep="")
        sdfile=paste(stem,"-sd.csv",sep="")
        meantab=read.csv(meanfile,header=TRUE)
        meantab=meantab[,2:ncol(meantab)]
        sdtab=read.csv(sdfile,header=TRUE)
        sdtab=sdtab[,2:ncol(sdtab)]
        xbartab=meantab
        stab=sdtab
        xbartab[]=0
        stab[]=0
        for (i in 1:n) {
                if (verb==TRUE)
                        print(i)
                runcmd=paste("gillespie2 -m",modelfile,
                       "-t 50 -n 50 -s",
                       trunc(runif(1,0,1e6)),
                       "> /tmp/run.out")
                system(runcmd)
                outtab=read.table("/tmp/run.out",
                        header=TRUE)
                outtab=outtab[,2:ncol(outtab)]
                xbartab=xbartab+outtab
                stab=stab+(outtab-meantab)*(outtab-meantab)
        }
        xbartab=xbartab/n
        stab=stab/n
        ztab=sqrt(n)*(xbartab-meantab)/sdtab
        ytab=sqrt(n/2)*((stab/(sdtab*sdtab))-1)
        ztab=as.matrix(ztab)
        ytab=as.matrix(ytab)
        meanfails=sum(abs(xbartab-meantab)>
                  meanthresh*sdtab/sqrt(n))
        sdfails=sum((ytab>sdthresh)|
                  (ytab<(-sdthresh)),na.rm=TRUE)
        if (verb==TRUE) {
                print(ztab)
                print(ytab)
        }
        if (plot==TRUE) {
               op=par(mfrow=c(2,1))
               plot(0,0,xlim=c(0,50), ylim=c(-10,10),
               xlab="Time", ylab="SDs from truth")
               title(main=paste("Mean diagnostics for model", model))
                abline(0,0,col="green")
                abline(meanthresh,0,col="red")
                abline(-meanthresh,0,col="red")
                for (i in 1:ncol(ztab))
                        lines(ts(ztab[,i],start=0),lwd=3)
                plot(0,0,xlim=c(0,50),ylim=c(-10,10),xlab="Time",ylab="SDs from truth")
                title(main=paste("SD diagnostics for model",model))
                abline(0,0,col="green")
                abline(sdthresh,0,col="red")
                abline(-sdthresh,0,col="red")
                for (i in 1:ncol(ztab))
                        lines(ts(ytab[,i],start=0),lwd=3)
                par(op)
        }
        print(paste(meanfails,"mean test fails"))
        print(paste(sdfails,"sd test fails"))
        c(meanfails,sdfails)
  }
}}}
This can be called with a command like: {{{testmodel("dsmts-001-01",n=1000,verb=FALSE,plot=TRUE)}}}

Note that this particular function explicitly passes a random seed to the simulator. For some simulators this will not be necessary (indeed, it is not necessary for this simulator). To run the full batch of tests using the "model-list" file in the test suite, the following function is needed: 
{{{
testbatch<-function(mods="model-list",tspath=".",verb=FALSE,...)
 {
        listfile=paste(tspath,mods,sep="/")
        modlist=scan(listfile,what="text")
        cumfails=c(0,0)
        modfails=0
        for (filename in modlist) {
                print(filename)
                fails=testmodel(model=filename,tspath=tspath,verb=verb,...)
                cumfails=cumfails+fails
                if (sum(fails)>0)
                        modfails=modfails+1
        }
        print(paste(cumfails[1],"mean fails in total"))
        print(paste(cumfails[2],"sd fails in total"))
        print(paste(modfails,"distinct models with at least one fail"))
        modfails
 }
}}}
and this can be called with a command like {{{testbatch(n=10000,plot=TRUE,tspath="/home/myid/dsmts")}}}

It should be straightforward to see how this code could be adapted to other languages.